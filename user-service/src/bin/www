const app = require('../app')
const http = require('http')
const registerEnv = require('../configs/registerEnv')
const initSentry = require('../initializers/sentry')
const { startGrpcServer } = require('../initializers/grpcServer')
const {
  connectToMysql,
  createAssociation,
} = require('../initializers/sequelize')
const { User } = require('../models/users')

function onError(port, error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
    default:
      throw error
  }
}

async function onListening(server) {
  const addr = server.address()
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port

  registerEnv()
  initSentry(app)
  startGrpcServer()
  await connectToMysql()
  createAssociation()

  console.log('Listening on ' + bind)
}

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

const port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

const server = http.createServer(app)

server.listen(port)
server.on('error', (error) => onError(port, error))
server.on('listening', () => onListening(server))
